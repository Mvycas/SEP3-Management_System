@page "/ViewUsers"

@using PoCLayer1.Http
@using PoCLayer1.Model
@inject IUserHttpClient _iUserHttpClient
@inject IEmployeeHttpClient _iEmployeeHttpClient
@inject NavigationManager navMgr

<h3>Users: </h3>

@if (users == null)

{
    <p>
    <em>Loading...</em>
        </p>
}
else if (!users.Any())
{
    <p>
    <em>There are no users within the system.</em>
    </p>
}
else 
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th> 
            <th>Username</th> 
            <th>First name</th> 
            <th>Last name</th> 
            <th>Email</th> 
            <th>Phone number</th> 
            <AuthorizeView Roles="Manager">
            <th>Remove</th> 
            <th>Edit</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in users)
        {
            <tr>
                <td>@item.id</td> <td>@item.username</td> <td>@item.firstName</td> <td>@item.lastName</td> <td>@item.email</td> <td>@item.phoneNumber</td>
                <AuthorizeView Roles="Manager">
                <td>
                    @switch (item.authLevel)
                    {
                        case "Manager":
                        {
                            <label @onclick="@(() => RemoveUser(item.id))" style="cursor:pointer; color: #0000ff; font-weight: bold">
                                &#x2716;
                            </label>
                        } break;

                        case "Employee":
                        {
                            <label @onclick="@(() => RemoveEmployee(item.id))" style="cursor:pointer; color: red; font-weight: bold">
                                &#x2716;
                            </label>
                        } break;
                    }

                </td>
                <td>
                    @switch (item.authLevel)
                    {
                        case "Manager" or "Admin":
                        {
                            <label @onclick="@(() => EditUser(item.id))" style="cursor:pointer; color: #0000ff; font-weight: bold">
                                &#128295;
                            </label>
                        } break;
                    }
                
                </td>
               </AuthorizeView>
            </tr>
        }
        </tbody>
    </table> 
}
@if (!string.IsNullOrEmpty(errorLabel))
{
    <label style="color: red">@errorLabel</label>
}

@code {
    private ICollection<Employee> employees;
    private ICollection<User> users;
    private string errorLabel;

    protected override async Task OnInitializedAsync()
    {
        users = await _iUserHttpClient.GetAllUsersAsync();
        employees = await _iEmployeeHttpClient.GetAllEmployeesAsync();
    }
    
    private async Task RemoveUser(long id)
    {
        errorLabel = "";
        try
        {
            
            User userToRemove = users.First(user => user.id == id);
            await _iUserHttpClient.DeleteUserByIdAsync(id);
            users.Remove(userToRemove);
            await OnInitializedAsync();
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }
    
    private async Task RemoveEmployee(long id)
    {
        errorLabel = "";
        try
        {
            
            Employee employeeToRemove = employees.First(employee => employee.id == id);
            await _iEmployeeHttpClient.DeleteEmployeeByIdAsync(id);
            employees.Remove(employeeToRemove);
            await OnInitializedAsync();
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }
    
    private async Task EditUser(long id)
    {
        long Id = id;
        navMgr.NavigateTo($"EditUser/{Id}");
    }
    
    

}