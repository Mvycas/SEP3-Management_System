@page "/Home"


@using PoCLayer1.Http
@using PoCLayer1.Model
@inject NavigationManager navMgr
@inject IUserHttpClient _userHttpClient

@* POST EMPLOYEE *@
<div class="card" style="width: 40rem; border: 0.1rem solid darkblue;">
    <div class="form-group card-body">
        <h3>Post:</h3>
        <br/>
        <div class="row">
            <label>Post:</label>
            <div class="col-4">
                <input type="login" placeholder="Login" @bind="username"/>
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-4">
                <label>Password:</label>
                <div class="col-4">
                    <input type="password" placeholder="Enter password" @bind="password"/>
                </div>
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-4">
                <label>Auth Level:</label>
                <div class="col-4">
                    <input type="password" placeholder="Enter password" @bind="authLevel"/>
                </div>
            </div>
        </div>
        <br/>
        
        @if (returnedUserFromAdd != null)
        {
            <div class="field">
                <label style="color: green">
                    <h1>Added:</h1>
                    <br/>
                    <a>Id: @returnedUserFromAdd.id</a>
                    <a>Login: @returnedUserFromAdd.username</a>
                    <a>Password: @returnedUserFromAdd.password</a>
                </label>
            </div>
        }
        
        <div class="field">
            <button class="button btn-dark" @onclick="PostUser">Post</button>
        </div>
    </div>
</div>


<br/>

@* GET BY ID *@
<div class="card" style="width: 40rem; border: 0.1rem solid darkblue;">
    <div class="form-group card-body">
    <div class="row">
        <label>Get User By ID:</label>
        <div class="col-4">
            <input type="id" placeholder="ID" @bind="id"/>
        </div>
        <div class="field">
            <button class="button btn-dark" @onclick="GetById">Get</button>
        </div>
    </div>
    <br/>
    @if (returnedUserById != null)
    {
        <div class="field">
            <label style="color: green">
                <h1>Returned by ID:</h1>
                <br/>
                <a>Id: @returnedUserById.id</a>
                <a>Login: @returnedUserById.username</a>
                <a>Password: @returnedUserById.password</a>
            </label>
        </div>
    }
    </div>
</div>

<br/>

@* DELETE EMPLOYEE *@
<div class="card" style="width: 40rem; border: 0.1rem solid darkblue;">
    <div class="form-group card-body">
        <div class="row">
            <label>Delete User By ID:</label>
            <div class="col-4">
                <input type="id" placeholder="ID" @bind="id"/>
            </div>
            <div class="field">
                <button class="button btn-dark" @onclick="DeleteById">Delete</button>
            </div>
        </div>
        <br/>
        @if (returnedUserFromDelete != null)
        {
            <div class="field">
                <label style="color: green">
                    <h1>Returned by ID:</h1>
                    <br/>
                    <a>Id: @returnedUserFromDelete.id</a>
                    <a>Login: @returnedUserFromDelete.username</a>
                    <a>Password: @returnedUserFromDelete.password</a>
                </label>
            </div>
        }
    </div>
</div>

<br/>

@* EMPLOYEE LIST *@
<div class="card" style="width: 40rem; border: 0.1rem solid darkblue;">
    <div class="form-group card-body">
        <div class="row">
            <label>All Users:</label>
            <div class="field">
               <button class="button btn-dark" @onclick="UpdateUserList">Update</button>
            </div>
            @if (allUsers != null)
            {
                foreach (var emp in allUsers)
                {
                    <div class="field">
                        <a>Id: @emp.id</a>
                        <a>Login: @emp.username</a>
                        <a>Password: @emp.password</a>
                        <br/>
                    </div>
                }
            }
        </div>
    </div>
</div>

<br/>

@* UPDATE EMPLOYEE *@
<div class="card" style="width: 40rem; border: 0.1rem solid darkblue;">
    <div class="form-group card-body">
        <h3>Update User:</h3>
        <br/>
                <div class="row">
                    <label>ID:</label>
                    <div class="col-4">
                        <input type="id" placeholder="ID" @bind="updatedId"/>
                    </div>
                </div>
        <br/>
        <div class="row">
            <label>Login:</label>
            <div class="col-4">
                <input type="login" placeholder="Login" @bind="updatedUsername"/>
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-4">
                <label>Password:</label>
                <div class="col-4">
                    <input type="password" placeholder="Enter password" @bind="updatedPassword"/>
                </div>
            </div>
        </div>
        <br/>

        @if (returnedUpdatedUser != null)
        {
            <div class="field">
                <label style="color: green">
                    <h1>Added:</h1>
                    <br/>
                    <a>Id: @returnedUpdatedUser.id</a>
                    <a>Login: @returnedUpdatedUser.username</a>
                    <a>Password: @returnedUpdatedUser.password</a>
                </label>
            </div>
        }
        <div class="field">
            <button class="button btn-dark" @onclick="UpdateUser">Update</button>
        </div>
    </div>
</div>

@code {
    private string username;
    private string password;
    private string authLevel;
    private long id;
    private long updatedId;
    private string updatedUsername;
    private string updatedPassword;
    private User returnedUpdatedUser;
    private User returnedUserFromAdd;
    private User returnedUserFromDelete;
    private User returnedUserById;
    private ICollection<User> allUsers;

    protected override async Task OnInitializedAsync()
    {

        allUsers = await _userHttpClient.GetAllUsersAsync();

    }

    private async Task PostUser()
    {
        User newUser = new User(default, username, password, "fName", "lName", "email", "98519581", authLevel);
        Console.WriteLine("HOME: " + newUser.id);
        returnedUserFromAdd = await _userHttpClient.AddUserAsync(newUser);
    }

    private async Task GetById()
    {
        returnedUserById = await _userHttpClient.GetUserByIdAsync(id);
    }

    private async Task DeleteById()
    {
        returnedUserFromDelete = await _userHttpClient.DeleteUserByIdAsync(id);
    }

    private async Task UpdateUser()
    {
         // User updateUser = new User(updatedId, updatedLogin, updatedPassword);
         // returnedUpdatedUser = await employeeHttpClient.UpdateUserAsync(updatedUser);
    }

    private async Task UpdateUserList()
    {
        allUsers = await _userHttpClient.GetAllUsersAsync();
    }
    
}